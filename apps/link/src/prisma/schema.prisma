datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(uuid())
  email String @unique

  name     String?
  verified Boolean @default(false)
  image    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  sessions      Session[]
  accounts      Account[]
  organizations Member[]
}

model Account {
  id                String @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token            String
  refresh_token_expires_in Int?
  access_token             String
  expires_at               Int?

  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id      String   @id @default(uuid())
  token   String   @unique
  userId  String
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// enum Plan {
//   TRIAL // 7 days
//   BASIC // pay for 1 month, 1 user
//   PRO // pay for 1 year, 2 users
//   BUSINESS // pay for 1 year, 10 users
//   ENTERPRISE // pay for 1 year, 20+
// }

// enum OrganizationType {
//   PERSONAL
//   TEAM
//   BUSINESS
//   ENTERPRISE
// }

model Organization {
  id   String @id @default(uuid())
  name String @unique

  // type OrganizationType

  // plan Plan @default(TRIAL)

  members Member[]
  links   Link[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

enum Role {
  OWNER // Creator of the organization
  ADMIN // Can manage members, links, and settings
  MEMBER // Can view links + password-protected links, and analytics
}

model Member {
  id             String @id @default(uuid())
  userId         String
  organizationId String
  role           Role

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

model Link {
  organizationId String

  id     String  @id @default(uuid())
  url    String // The original URL where the key will redirect to
  domain String // The domain of the generated link
  key    String  @unique
  cloak  Boolean @default(false) // If the link is cloaked, it will hide the original URL
  // previous_key String? // If the key was changed, the previous key will be stored here so we can redirect the old key to the new one

  og_title       String? @db.Char(255)
  og_description String? @db.VarChar(255)
  og_image       String? @db.Text

  utm_source   String? // UTM: The source of the link (e.g. newsletter, facebook, twitter)
  utm_medium   String? // UTM: The medium of the link (e.g. cpc, banner, email)
  utm_campaign String? // UTM: The campaign of the link (e.g. spring_sale)
  utm_term     String? // UTM: The term of the link (e.g. reyn)
  utm_content  String? // UTM: The content of the link (e.g. utm_content=logolink)

  private  Boolean @default(false) // If the link is private, not public
  disabled Boolean @default(false) // If the link is disabled
  archived Boolean @default(false) // If the link is archived / removed
  flagged  Boolean @default(false) // If the link is flagged for inspection
  verified Boolean @default(false) // If the link is verified

  visits      Int       @default(0)
  lastVisited DateTime?

  createdAt DateTime  @default(now())
  expiresAt DateTime?
  updatedAt DateTime?
  deletedAt DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([domain, key])
  @@index([domain, key])
  @@index([domain, url])
  // @@index([domain, previous_key])
  @@index(createdAt(sort: Desc))
  @@index(visits(sort: Desc))
}
